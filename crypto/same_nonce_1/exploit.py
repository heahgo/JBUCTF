from pwn import *
from base64 import b64encode, b64decode

def xor_bytes(a, b, block_size):
    result = int(a.hex(), 16) ^ int(b.hex(), 16)
    result = bytes.fromhex(hex(result)[2:].zfill(block_size*2))
    return result

BLOCK_SIZE = 16

p = remote('172.17.0.2', 10005)
p.recvuntil(b'>> ')
p.sendline(b'2')
enc_flag = p.recvline()[:-1]
enc_flag = b64decode(enc_flag)
cipher_szie = len(enc_flag)

p = remote('172.17.0.2', 10005)
p.recvuntil(b'>> ')
p.sendline(b'1')
data = b'A'*cipher_szie
p.sendafter(b'data : ', b64encode(data) + b'\n')
enc_data = b64decode(p.recvline())

p.recvuntil(b'>> ')
p.sendline(b'2')
enc_flag = p.recvline()[:-1]
enc_flag = b64decode(enc_flag)
p.close()

tmp = b''
flag = b''
for i in range(0, cipher_szie, BLOCK_SIZE):
    tmp += xor_bytes(enc_flag[i:i + BLOCK_SIZE], enc_data[i:i + BLOCK_SIZE], len(enc_data[i:i + BLOCK_SIZE]))

for i in range(0, cipher_szie, BLOCK_SIZE):
    flag += xor_bytes(tmp[i:i + BLOCK_SIZE], data[i:i + BLOCK_SIZE],len(data[i:i + BLOCK_SIZE]))

print(f'flag : {flag.decode()}')