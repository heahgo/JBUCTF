from Crypto.Util.number import isPrime
from math import sqrt


ciphertext = 432288481052681189090176519008539775108950040355090478401749805429896942528608213747269798644926998719743797449984752164340698648145636939108189591510914371257878742003475231992523287604128898293503204595209857896160892752567530213170151920484422528302711101483513687827375476940895626206384310722300059467
n = 1069514326270792353891256051072709441048070068706944796851477906574395106486827550551992731960853108305950758635823591101832150090095676150323676991538338027720088976678116201589231099207173900239440291373545912507063707628158046792701867587269895038880494164380795065367673596705023231920777446021911780183
e = 65537

for r in range(2**10, 2**11):
    if sqrt(n + r*r).is_integer():
        p = int(sqrt(n + r*r)) - r
        if isPrime(p) == True:
            q = p + 2*r
            if isPrime(q) == True:
                if p * q == n:
                    break

pi = (p-1) * (q-1)
d = pow(e, -1, pi)
flag = pow(ciphertext, d, n)


flag = (hex(flag)[2:])

if len(flag) % 2 == 1:
    flag = '0' + flag

print(p, q)
flag = bytes.fromhex(flag)#.decode()
print(flag)

# n + r^2 = (p + r)^2